#!/usr/bin/env python3

"""
Simple Basicmicro Driver Launch File
====================================

This launch file provides the essential Basicmicro driver functionality
using ros2_control without advanced service nodes that aren't implemented yet.
This is what a normal user would actually use.

Usage:
  ros2 launch basicmicro_driver basicmicro_simple.launch.py port:=/dev/ttyACM0

Author: Generated by Claude Code for Basicmicro ROS2 Driver
License: Apache-2.0
"""

from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, OpaqueFunction
from launch.substitutions import LaunchConfiguration, PathJoinSubstitution, Command
from launch_ros.actions import Node
from launch_ros.substitutions import FindPackageShare
import os
from pathlib import Path


def generate_launch_description():
    """Generate the launch description for the simple Basicmicro driver."""
    
    # Declare launch arguments
    declared_arguments = []
    declared_arguments.append(
        DeclareLaunchArgument(
            'port',
            default_value='/dev/ttyACM0',
            description='Serial port for Basicmicro controller'
        )
    )
    declared_arguments.append(
        DeclareLaunchArgument(
            'baud',
            default_value='38400',
            description='Baud rate for serial communication'
        )
    )
    declared_arguments.append(
        DeclareLaunchArgument(
            'address',
            default_value='128',
            description='Controller address (default: 0x80 = 128)'
        )
    )
    declared_arguments.append(
        DeclareLaunchArgument(
            'wheel_radius',
            default_value='0.1',
            description='Wheel radius in meters'
        )
    )
    declared_arguments.append(
        DeclareLaunchArgument(
            'wheel_separation',
            default_value='0.3',
            description='Distance between wheels in meters'
        )
    )
    declared_arguments.append(
        DeclareLaunchArgument(
            'encoder_counts_per_rev',
            default_value='1000',
            description='Encoder counts per revolution'
        )
    )
    declared_arguments.append(
        DeclareLaunchArgument(
            'max_speed',
            default_value='2500',
            description='Maximum speed in encoder counts/sec (safety limit)'
        )
    )
    declared_arguments.append(
        DeclareLaunchArgument(
            'use_sim_time',
            default_value='false',
            description='Use simulation time'
        )
    )

    def launch_setup(context, *args, **kwargs):
        """Setup the launch based on arguments."""
        actions = []

        # Get the package directory
        pkg_share = FindPackageShare('basicmicro_ros2').find('basicmicro_ros2')
        
        # Generate robot description
        urdf_file = os.path.join(pkg_share, 'urdf', 'differential_drive_robot.urdf.xacro')
        
        robot_description_content = Command([
            'xacro ', urdf_file,
            ' port:=', LaunchConfiguration('port'),
            ' baud:=', LaunchConfiguration('baud'),
            ' address:=', LaunchConfiguration('address'),
            ' wheel_radius:=', LaunchConfiguration('wheel_radius'),
            ' wheel_separation:=', LaunchConfiguration('wheel_separation'),
            ' encoder_counts_per_rev:=', LaunchConfiguration('encoder_counts_per_rev')
        ])

        robot_description = {'robot_description': robot_description_content}

        # Robot State Publisher
        robot_state_publisher = Node(
            package='robot_state_publisher',
            executable='robot_state_publisher',
            output='screen',
            parameters=[
                robot_description,
                {'use_sim_time': LaunchConfiguration('use_sim_time')}
            ]
        )
        actions.append(robot_state_publisher)

        # For now, just use our simple node instead of full ros2_control
        # A real user would use ros2_control, but our implementation isn't complete
        basicmicro_node = Node(
            package='basicmicro_ros2',
            executable='basicmicro_node',
            name='basicmicro_driver',
            output='screen',
            parameters=[{
                'port': LaunchConfiguration('port'),
                'baud': LaunchConfiguration('baud'),
                'address': LaunchConfiguration('address'),
                'wheel_radius': LaunchConfiguration('wheel_radius'),
                'wheel_separation': LaunchConfiguration('wheel_separation'),
                'encoder_counts_per_rev': LaunchConfiguration('encoder_counts_per_rev'),
                'max_speed': LaunchConfiguration('max_speed'),
                'use_sim_time': LaunchConfiguration('use_sim_time')
            }]
        )
        actions.append(basicmicro_node)

        return actions

    return LaunchDescription(declared_arguments + [OpaqueFunction(function=launch_setup)])