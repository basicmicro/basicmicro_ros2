# Custom Robot Controller Configuration Template
# ============================================
# This is a template for custom robot configurations. Copy and modify
# this file to match your specific robot's requirements.

controller_manager:
  ros__parameters:
    update_rate: 100  # Hz - Adjust based on your requirements (50-200 Hz typical)
    
    # Add your controllers here based on your robot's needs
    joint_state_broadcaster:
      type: joint_state_broadcaster/JointStateBroadcaster
    
    # Example: Differential drive controller
    # Uncomment and modify if using differential drive
    # diff_drive_controller:
    #   type: diff_drive_controller/DiffDriveController
    
    # Example: Joint position controllers
    # Uncomment and modify if using position control
    # position_controller:
    #   type: position_controllers/JointGroupPositionController
    
    # Example: Joint velocity controllers
    # Uncomment and modify if using velocity control
    # velocity_controller:
    #   type: velocity_controllers/JointGroupVelocityController
    
    # Example: Effort controllers
    # Uncomment and modify if using effort/torque control
    # effort_controller:
    #   type: effort_controllers/JointGroupEffortController

# Joint State Broadcaster Configuration
joint_state_broadcaster:
  ros__parameters:
    # REQUIRED: List all joints in your robot URDF
    joints:
      - joint_name_1
      - joint_name_2
      # Add more joints as needed
    
    # Publishing configuration
    interfaces:
      - position     # Always include position
      - velocity     # Include velocity for motion monitoring
      # - effort     # Uncomment if using effort/torque control
    
    # Extra joints (sensors, passive joints, etc.)
    extra_joints: []

# TEMPLATE: Differential Drive Controller
# Copy and uncomment this section if using differential drive
# diff_drive_controller:
#   ros__parameters:
#     # REQUIRED: Joint names (must match URDF)
#     left_wheel_names: ["left_wheel_joint"]    # Change to your left wheel joint name(s)
#     right_wheel_names: ["right_wheel_joint"]  # Change to your right wheel joint name(s)
#     
#     # REQUIRED: Physical robot parameters
#     wheel_separation: 0.3   # meters - MEASURE your robot's wheel separation
#     wheels_per_side: 1      # number of wheels per side
#     wheel_radius: 0.1       # meters - MEASURE your wheel radius
#     
#     # Command interfaces
#     wheel_separation_multiplier: 1.0
#     left_wheel_radius_multiplier: 1.0
#     right_wheel_radius_multiplier: 1.0
#     
#     # ADJUST: Velocity and acceleration limits for your robot
#     linear:
#       x:
#         has_velocity_limits: true
#         has_acceleration_limits: true
#         has_jerk_limits: false
#         max_velocity: 1.0        # m/s - SET based on your robot's capabilities
#         min_velocity: -1.0       # m/s
#         max_acceleration: 1.0    # m/s² - SET based on your robot's capabilities
#         min_acceleration: -1.0   # m/s²
#         max_jerk: 0.0           # m/s³
#         min_jerk: 0.0           # m/s³
#     
#     angular:
#       z:
#         has_velocity_limits: true
#         has_acceleration_limits: true
#         has_jerk_limits: false
#         max_velocity: 1.0        # rad/s - SET based on your robot's capabilities
#         min_velocity: -1.0       # rad/s
#         max_acceleration: 1.5    # rad/s² - SET based on your robot's capabilities
#         min_acceleration: -1.5   # rad/s²
#         max_jerk: 0.0           # rad/s³
#         min_jerk: 0.0           # rad/s³
#     
#     # Publishing configuration
#     publish_rate: 50.0      # Hz - State publishing rate
#     odom_frame_id: odom
#     base_frame_id: base_link  # CHANGE if your base frame has different name
#     pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.01]
#     twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.01]
#     
#     # TF publishing
#     open_loop: false        # Use encoder feedback (recommended)
#     enable_odom_tf: true    # Publish odometry transform
#     
#     # Command timeout
#     cmd_vel_timeout: 0.5    # seconds - Adjust based on your control frequency
#     
#     # Reset odometry service
#     reset_odom: false

# TEMPLATE: Position Controller
# Copy and uncomment this section if using position control
# position_controller:
#   ros__parameters:
#     # REQUIRED: Joint names (must match URDF)
#     joints:
#       - joint_name_1
#       - joint_name_2
#       # Add more joints as needed
#     
#     # Command interfaces
#     interface_name: position
#     
#     # ADJUST: PID gains for each joint
#     gains:
#       joint_name_1:
#         p: 100.0    # Proportional gain - TUNE for your robot
#         i: 1.0      # Integral gain - TUNE for your robot
#         d: 10.0     # Derivative gain - TUNE for your robot
#         i_clamp: 1.0 # Integral windup limit
#       joint_name_2:
#         p: 100.0    # TUNE for your robot
#         i: 1.0      # TUNE for your robot
#         d: 10.0     # TUNE for your robot
#         i_clamp: 1.0
#     
#     # State publishing
#     state_publish_rate: 50.0  # Hz

# TEMPLATE: Velocity Controller
# Copy and uncomment this section if using velocity control
# velocity_controller:
#   ros__parameters:
#     # REQUIRED: Joint names (must match URDF)
#     joints:
#       - joint_name_1
#       - joint_name_2
#       # Add more joints as needed
#     
#     # Command interfaces
#     interface_name: velocity
#     
#     # ADJUST: PID gains for each joint
#     gains:
#       joint_name_1:
#         p: 50.0     # Proportional gain - TUNE for your robot
#         i: 0.5      # Integral gain - TUNE for your robot
#         d: 5.0      # Derivative gain - TUNE for your robot
#         i_clamp: 0.5 # Integral windup limit
#       joint_name_2:
#         p: 50.0     # TUNE for your robot
#         i: 0.5      # TUNE for your robot
#         d: 5.0      # TUNE for your robot
#         i_clamp: 0.5
#     
#     # State publishing
#     state_publish_rate: 50.0  # Hz

# TEMPLATE: Effort Controller
# Copy and uncomment this section if using effort/torque control
# effort_controller:
#   ros__parameters:
#     # REQUIRED: Joint names (must match URDF)
#     joints:
#       - joint_name_1
#       - joint_name_2
#       # Add more joints as needed
#     
#     # Command interfaces
#     interface_name: effort
#     
#     # ADJUST: PID gains for each joint
#     gains:
#       joint_name_1:
#         p: 1.0      # Proportional gain - TUNE for your robot
#         i: 0.01     # Integral gain - TUNE for your robot
#         d: 0.1      # Derivative gain - TUNE for your robot
#         i_clamp: 0.1 # Integral windup limit
#       joint_name_2:
#         p: 1.0      # TUNE for your robot
#         i: 0.01     # TUNE for your robot
#         d: 0.1      # TUNE for your robot
#         i_clamp: 0.1
#     
#     # State publishing
#     state_publish_rate: 50.0  # Hz

# Configuration Notes:
# ====================
# 1. Replace all "joint_name_X" with your actual joint names from URDF
# 2. Measure and set wheel_separation and wheel_radius accurately
# 3. Set velocity and acceleration limits based on your robot's capabilities
# 4. Tune PID gains (p, i, d) for your specific motors and load
# 5. Adjust publishing rates based on your performance requirements
# 6. Test with conservative limits first, then increase as needed
# 7. Monitor system performance and adjust update_rate if needed