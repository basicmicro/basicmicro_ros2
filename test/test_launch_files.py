#!/usr/bin/env python3

"""
Launch File Integration Tests
=============================

This module tests that the launch files can be processed correctly and 
include all necessary components for the Basicmicro driver system.

Author: Generated by Claude Code for Basicmicro ROS2 Driver  
License: Apache-2.0
"""

import pytest
import os
import sys
from pathlib import Path
import tempfile
import yaml

# Add the package to Python path for testing
package_dir = Path(__file__).parent.parent
sys.path.insert(0, str(package_dir))

try:
    from launch import LaunchDescription, LaunchContext
    from launch.actions import DeclareLaunchArgument
    from launch_ros.actions import Node
    from launch.substitutions import LaunchConfiguration
    ROS2_AVAILABLE = True
except ImportError:
    ROS2_AVAILABLE = False


class TestLaunchFileIntegration:
    """Test launch file integration and configuration validation."""
    
    def setup_method(self):
        """Set up test environment."""
        self.package_dir = Path(__file__).parent.parent
        self.launch_dir = self.package_dir / "launch"
        self.config_dir = self.package_dir / "config"
        self.urdf_dir = self.package_dir / "urdf"
        
    def test_launch_directory_exists(self):
        """Test that launch directory exists and contains expected files."""
        assert self.launch_dir.exists(), "Launch directory should exist"
        
        # Check for main launch file
        main_launch = self.launch_dir / "basicmicro_driver.launch.py"
        assert main_launch.exists(), "Main launch file should exist"
        assert main_launch.is_file(), "Main launch file should be a file"
        
    def test_config_directory_structure(self):
        """Test that config directory has all required configuration files."""
        assert self.config_dir.exists(), "Config directory should exist"
        
        expected_configs = [
            "diff_drive_controllers.yaml",
            "industrial_controllers.yaml", 
            "multi_controller_controllers.yaml",
            "custom_controllers.yaml",
            "example_robot_parameters.yaml"
        ]
        
        for config_file in expected_configs:
            config_path = self.config_dir / config_file
            assert config_path.exists(), f"Config file {config_file} should exist"
            assert config_path.is_file(), f"Config file {config_file} should be a file"
            
    def test_urdf_directory_structure(self):
        """Test that URDF directory has required robot descriptions."""
        assert self.urdf_dir.exists(), "URDF directory should exist"
        
        expected_urdfs = [
            "differential_drive_robot.urdf.xacro"
        ]
        
        for urdf_file in expected_urdfs:
            urdf_path = self.urdf_dir / urdf_file
            assert urdf_path.exists(), f"URDF file {urdf_file} should exist"
            assert urdf_path.is_file(), f"URDF file {urdf_file} should be a file"
            
    def test_main_launch_file_syntax(self):
        """Test that main launch file has correct Python syntax."""
        main_launch = self.launch_dir / "basicmicro_driver.launch.py"
        
        # Test Python syntax by compiling
        with open(main_launch, 'r') as f:
            content = f.read()
            
        try:
            compile(content, str(main_launch), 'exec')
        except SyntaxError as e:
            pytest.fail(f"Launch file has syntax error: {e}")
            
    def test_launch_file_imports(self):
        """Test that launch file imports are available."""
        main_launch = self.launch_dir / "basicmicro_driver.launch.py"
        
        with open(main_launch, 'r') as f:
            content = f.read()
            
        # Check for required imports
        required_imports = [
            'from launch import LaunchDescription',
            'from launch.actions import DeclareLaunchArgument',
            'from launch_ros.actions import Node',
            'from launch.substitutions import LaunchConfiguration'
        ]
        
        for import_stmt in required_imports:
            assert import_stmt in content, f"Launch file should contain: {import_stmt}"
            
    @pytest.mark.skipif(not ROS2_AVAILABLE, reason="ROS2 not available")
    def test_launch_description_generation(self):
        """Test that launch description can be generated."""
        # Import the launch file module
        sys.path.insert(0, str(self.launch_dir))
        
        try:
            import basicmicro_driver_launch
            
            # Test that generate_launch_description function exists
            assert hasattr(basicmicro_driver_launch, 'generate_launch_description'), \
                "Launch file should have generate_launch_description function"
            
            # Test that it returns a LaunchDescription
            ld = basicmicro_driver_launch.generate_launch_description()
            assert isinstance(ld, LaunchDescription), \
                "generate_launch_description should return LaunchDescription"
                
        except ImportError as e:
            pytest.fail(f"Could not import launch file: {e}")
        finally:
            # Clean up sys.path
            if str(self.launch_dir) in sys.path:
                sys.path.remove(str(self.launch_dir))
                
    def test_config_file_yaml_syntax(self):
        """Test that all YAML configuration files have valid syntax."""
        yaml_files = list(self.config_dir.glob("*.yaml"))
        assert len(yaml_files) > 0, "Should have YAML configuration files"
        
        for yaml_file in yaml_files:
            with open(yaml_file, 'r') as f:
                try:
                    yaml.safe_load(f)
                except yaml.YAMLError as e:
                    pytest.fail(f"YAML file {yaml_file.name} has syntax error: {e}")
                    
    def test_controller_configurations_structure(self):
        """Test that controller configuration files have expected structure."""
        controller_configs = [
            "diff_drive_controllers.yaml",
            "industrial_controllers.yaml",
            "multi_controller_controllers.yaml"
        ]
        
        for config_name in controller_configs:
            config_path = self.config_dir / config_name
            
            with open(config_path, 'r') as f:
                config = yaml.safe_load(f)
                
            # Check for required top-level sections
            assert "controller_manager" in config, \
                f"{config_name} should have controller_manager section"
            assert "joint_state_broadcaster" in config, \
                f"{config_name} should have joint_state_broadcaster section"
                
            # Check controller_manager structure
            cm = config["controller_manager"]["ros__parameters"]
            assert "update_rate" in cm, \
                f"{config_name} controller_manager should have update_rate"
            assert isinstance(cm["update_rate"], (int, float)), \
                f"{config_name} update_rate should be numeric"
                
    def test_urdf_xacro_syntax(self):
        """Test that URDF xacro files have valid XML syntax."""
        urdf_files = list(self.urdf_dir.glob("*.urdf.xacro"))
        assert len(urdf_files) > 0, "Should have URDF xacro files"
        
        for urdf_file in urdf_files:
            with open(urdf_file, 'r') as f:
                content = f.read()
                
            # Basic XML structure checks
            assert '<?xml version="1.0"?>' in content, \
                f"{urdf_file.name} should have XML declaration"
            assert '<robot' in content, \
                f"{urdf_file.name} should have robot element"
            assert '</robot>' in content, \
                f"{urdf_file.name} should have closing robot element"
            assert '<ros2_control' in content, \
                f"{urdf_file.name} should have ros2_control section"
                
    def test_launch_arguments_consistency(self):
        """Test that launch arguments are consistent across files."""
        main_launch = self.launch_dir / "basicmicro_driver.launch.py"
        
        with open(main_launch, 'r') as f:
            content = f.read()
            
        # Check for key launch arguments
        expected_args = [
            'robot_config',
            'port',
            'baud', 
            'address',
            'wheel_radius',
            'wheel_separation',
            'encoder_counts_per_rev',
            'motion_strategy',
            'enable_monitoring',
            'enable_diagnostics'
        ]
        
        for arg in expected_args:
            assert f"'{arg}'" in content or f'"{arg}"' in content, \
                f"Launch file should define {arg} argument"
                
    def test_parameter_examples_completeness(self):
        """Test that parameter examples cover different robot types."""
        examples_file = self.config_dir / "example_robot_parameters.yaml"
        
        with open(examples_file, 'r') as f:
            examples = yaml.safe_load(f)
            
        # Check for different robot configuration examples
        expected_examples = [
            'small_diff_drive',
            'medium_industrial', 
            'high_performance_agv',
            'multi_controller_4wd',
            'roboclaw_servo',
            'mcp_advanced',
            'minimal_test'
        ]
        
        for example in expected_examples:
            assert example in examples, \
                f"Parameter examples should include {example}"
                
            # Check that each example has required parameters
            example_config = examples[example]
            
            if isinstance(example_config, dict) and 'port' in example_config:
                # Single controller configuration
                required_params = ['port', 'baud', 'address', 'wheel_radius', 'wheel_separation']
                for param in required_params:
                    assert param in example_config, \
                        f"Example {example} should have {param} parameter"
                        
    def test_documentation_consistency(self):
        """Test that documentation in files is consistent and helpful."""
        main_launch = self.launch_dir / "basicmicro_driver.launch.py"
        
        with open(main_launch, 'r') as f:
            content = f.read()
            
        # Check for documentation elements
        assert '"""' in content, "Launch file should have docstring"
        assert 'Usage Examples:' in content, "Launch file should have usage examples"
        assert 'ros2 launch' in content, "Launch file should show ros2 launch commands"
        
    def test_file_permissions(self):
        """Test that launch files have appropriate permissions."""
        main_launch = self.launch_dir / "basicmicro_driver.launch.py"
        
        # Check that file is readable
        assert os.access(main_launch, os.R_OK), "Launch file should be readable"
        
        # Check for execute permission or shebang
        with open(main_launch, 'r') as f:
            first_line = f.readline().strip()
            
        if first_line.startswith('#!'):
            # If it has shebang, should be executable
            assert os.access(main_launch, os.X_OK), \
                "Launch file with shebang should be executable"
                
    def test_integration_with_package_structure(self):
        """Test that launch files integrate properly with package structure."""
        # Check that paths referenced in launch file exist
        main_launch = self.launch_dir / "basicmicro_driver.launch.py"
        
        with open(main_launch, 'r') as f:
            content = f.read()
            
        # Check references to package directories
        assert 'config/' in content, "Launch file should reference config directory"
        assert 'urdf/' in content, "Launch file should reference urdf directory"
        
        # Check that service and executable names are consistent
        expected_nodes = [
            'motion_config_service_node',
            'distance_movement_service_node', 
            'trajectory_service_node',
            'servo_position_service_node',
            'duty_control_service_node',
            'trajectory_monitor_node',
            'diagnostic_publisher_node',
            'performance_monitor_node'
        ]
        
        for node in expected_nodes:
            assert node in content, f"Launch file should reference {node}"


class TestConfigurationValidation:
    """Test configuration file validation and parameter ranges."""
    
    def setup_method(self):
        """Set up test environment."""
        self.config_dir = Path(__file__).parent.parent / "config"
        
    def test_parameter_value_ranges(self):
        """Test that parameter values are in reasonable ranges."""
        examples_file = self.config_dir / "example_robot_parameters.yaml"
        
        with open(examples_file, 'r') as f:
            examples = yaml.safe_load(f)
            
        for example_name, example_config in examples.items():
            if not isinstance(example_config, dict):
                continue
                
            # Skip multi-controller examples (they have nested structure)
            if 'primary' in example_config or 'secondary' in example_config:
                continue
                
            # Test parameter ranges
            if 'wheel_radius' in example_config:
                radius = example_config['wheel_radius']
                assert 0.01 <= radius <= 1.0, \
                    f"{example_name}: wheel_radius should be 0.01-1.0m, got {radius}"
                    
            if 'wheel_separation' in example_config:
                separation = example_config['wheel_separation']
                assert 0.1 <= separation <= 5.0, \
                    f"{example_name}: wheel_separation should be 0.1-5.0m, got {separation}"
                    
            if 'encoder_counts_per_rev' in example_config:
                counts = example_config['encoder_counts_per_rev']
                assert 100 <= counts <= 10000, \
                    f"{example_name}: encoder_counts_per_rev should be 100-10000, got {counts}"
                    
            if 'baud' in example_config:
                baud = example_config['baud']
                valid_bauds = [9600, 19200, 38400, 57600, 115200]
                assert baud in valid_bauds, \
                    f"{example_name}: baud should be one of {valid_bauds}, got {baud}"
                    
    def test_controller_update_rates(self):
        """Test that controller update rates are reasonable."""
        controller_configs = [
            "diff_drive_controllers.yaml",
            "industrial_controllers.yaml",
            "multi_controller_controllers.yaml"
        ]
        
        for config_name in controller_configs:
            config_path = self.config_dir / config_name
            
            with open(config_path, 'r') as f:
                config = yaml.safe_load(f)
                
            update_rate = config["controller_manager"]["ros__parameters"]["update_rate"]
            assert 10 <= update_rate <= 1000, \
                f"{config_name}: update_rate should be 10-1000 Hz, got {update_rate}"
                
    def test_velocity_limits_consistency(self):
        """Test that velocity limits are consistent and reasonable."""
        controller_configs = [
            "diff_drive_controllers.yaml",
            "industrial_controllers.yaml"
        ]
        
        for config_name in controller_configs:
            config_path = self.config_dir / config_name
            
            with open(config_path, 'r') as f:
                config = yaml.safe_load(f)
                
            if "diff_drive_controller" in config:
                controller = config["diff_drive_controller"]["ros__parameters"]
                
                if "linear" in controller and "x" in controller["linear"]:
                    linear = controller["linear"]["x"]
                    if "max_velocity" in linear:
                        max_vel = linear["max_velocity"]
                        assert 0.1 <= max_vel <= 10.0, \
                            f"{config_name}: max linear velocity should be reasonable"
                            
                if "angular" in controller and "z" in controller["angular"]:
                    angular = controller["angular"]["z"]
                    if "max_velocity" in angular:
                        max_ang_vel = angular["max_velocity"]
                        assert 0.1 <= max_ang_vel <= 10.0, \
                            f"{config_name}: max angular velocity should be reasonable"


if __name__ == '__main__':
    pytest.main([__file__])